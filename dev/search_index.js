var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = UpdateJulia","category":"page"},{"location":"#UpdateJulia","page":"Home","title":"UpdateJulia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Prefer the README for better documentation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for UpdateJulia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [UpdateJulia]","category":"page"},{"location":"#UpdateJulia.insert_path-Tuple{Any, Any, Any}","page":"Home","title":"UpdateJulia.insert_path","text":"insert_path(path, entry, v)\n\nInsert path entry after valid & prefered julia but before unknown & unprefered julia\n\nInstert entry into path following these guidelines\n\nafter versions preferred over v\nbefore versions v is preferred over (inluding unknown versions)\nskip operation if entry already meets above guidelines\nbefore existing entries for v\nas late as possible\n\nNot part of the public API\n\n\n\n\n\n","category":"method"},{"location":"#UpdateJulia.prefer-Tuple{Union{Missing, VersionNumber}, Union{Missing, VersionNumber}}","page":"Home","title":"UpdateJulia.prefer","text":"prefer(v1, v2)\n\nWhether to prefer v1 over v2.\n\nNot part of the public API.\n\n\n\n\n\n","category":"method"},{"location":"#UpdateJulia.update_julia","page":"Home","title":"UpdateJulia.update_julia","text":"update_julia(version::AbstractString=\"\")\n\nInstall the latest version of Julia from https://julialang.org\n\nIf version is provided, installs the latest version that starts with version. If version == \"nightly\", then installs the bleeding-edge nightly version.\n\nKeyword Arguments\n\nBehavior flags\n\ndry_run = false skip the actual download and instillation\nverbose = dry_run print the final value of all arguments\nmigrate_packages = <upgrading to a Julia version without an existing environment> whether to copy Project.toml to the new version and run Pkg.update(). May be true, false, or :force. Only :force will replace an existing Project.toml\n\nDestination\n\naliases = [\"julia\", \"julia-$(v.major).$(v.minor)\", \"julia-$v\"] which aliases to attempt to create for the installed version of Julia. Regardless, will not replace stable versions with less stable versions or newer versions with older versions of the same stability.\nsystemwide = true install for all users, false only installs for current user.\ninstall_location = systemwide ? \"/opt\" or \"/opt/hostedtoolcache/julia/1.7.0\" : \"/home/runner/.local\" directory to put installed binaries\nbin = systemwide ? \"/usr/local/bin\" : \"/home/runner/.local/bin\" directory to store links to the binaries\n\nSource\n\nos_str = \"linux\" string representation of the operating system: \"linux\", \"mac\", \"winnt\", or \"freebsd\".\narch = \"x86_64\" string representation of the CPU architecture: \"x86_64\", \"i686\", \"aarch64\", \"armv7l\", or \"powerpc64le\".\nv = ... the VersionNumber to install\nurl = ... URL to download that version from, if you explicitly set url, also explicitly set v lest they differ\n\n\n\n\n\n","category":"function"}]
}
